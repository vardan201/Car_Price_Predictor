# -*- coding: utf-8 -*-
"""car price predictor.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1y-13aZBFMit64DH-VGUFGsgPDQA2v_5L
"""

import pandas as pd
import numpy as np

cars=pd.read_csv('/content/quikr_car.csv')

cars.head()

cars['kms_driven'].unique()

#hamesha unique laga ke dekh liya jaat hai
backup=cars.copy()



cars=cars[cars['year'].str.isnumeric()]



cars['year']=cars['year'].astype(int)

cars=cars[cars['Price']!='Ask for Price']
cars

cars['Price']=cars['Price'].str.replace(',','')

cars['Price'] = cars['Price'].str.replace(',', '').replace('', np.nan)

# Convert to numeric, forcing non-convertible values to NaN
cars['Price'] = pd.to_numeric(cars['Price'], errors='coerce')

# Drop rows with NaN in the 'Price' column
cars = cars.dropna(subset=['Price'])

# Convert 'Price' to integer
cars['Price'] = cars['Price'].astype(int)

cars.info()

cars['kms_driven'].unique()

cars['kms_driven'] = cars['kms_driven'].str.replace(',', '').str.replace(' kms', '')  # Remove commas and " kms"

# Use a regex pattern to keep only numeric values
cars['kms_driven'] =cars['kms_driven'].str.extract('(\d+)')  # Extract numeric part only

# Drop rows where 'Mileage' is NaN (non-numeric entries)
cars = cars.dropna(subset=['kms_driven'])

# Convert the column to integer or float
cars['kms_driven'] = cars['kms_driven'].astype(int)

cars=cars[~cars['fuel_type'].isna()]
cars['kms_driven'].unique()

cars['name']=cars['name'].str.split(' ').str.slice(0,3).str.join(' ')

cars.head()

cars=cars[cars['Price']<6e6].reset_index(drop=True)

X=cars.drop(columns=['Price'])
y=cars[['Price']]

from sklearn.model_selection import train_test_split

X_train,X_test,y_train,y_test=train_test_split(X,y,test_size=0.2)

from sklearn.linear_model import LinearRegression
from sklearn.preprocessing import OneHotEncoder,LabelEncoder
from sklearn.compose import make_column_transformer
from sklearn.pipeline import make_pipeline
from sklearn.metrics import r2_score
from sklearn.preprocessing import StandardScaler
import pandas as pd
import numpy as np
from sklearn.compose import ColumnTransformer
import pickle
from sklearn.pipeline import Pipeline
from sklearn.impute import SimpleImputer
from sklearn.multioutput import MultiOutputRegressor



column_trans = ColumnTransformer(
    transformers=[
        ('cat', OneHotEncoder(handle_unknown='ignore'), ['name', 'company', 'fuel_type'])  # Categorical features
    ],
    remainder='passthrough'  # Numerical features will pass through without changes
)

cars['kms_driven'].unique()

pipe = Pipeline(steps=[
    ('preprocessor', column_trans),
    ('regressor', LinearRegression())
])



X_train,X_test,y_train,y_test=train_test_split(X,y,test_size=0.2)
pipe.fit(X_train, y_train)

y_pred = pipe.predict(X_test)



r2_score(y_test, y_pred)

scores = []
for i in range(1000):
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=i)
    lr = LinearRegression()
    pipe = make_pipeline(column_trans, lr)
    pipe.fit(X_train, y_train)
    y_pred = pipe.predict(X_test)
    scores.append(r2_score(y_test, y_pred))

import numpy as np
np.argmax(scores)

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=np.argmax(scores))
lr = LinearRegression()
pipe = make_pipeline(column_trans, lr)
pipe.fit(X_train, y_train)
r2_score(y_test, y_pred)

encoder = OneHotEncoder(handle_unknown='ignore')
encoder.fit(X_train[['name', 'company', 'fuel_type']])


# Save the fitted encoder to a file
joblib.dump(encoder, 'encoder.pkl')
import joblib
joblib.dump(pipe, 'model.pkl')
joblib.dump(encoder, 'encoder.pkl')

